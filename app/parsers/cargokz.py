import requests
from datetime import datetime, timedelta
from itertools import combinations
from openpyxl import Workbook, load_workbook

transport_type = {'<12.5т, 60m3': 48, '<2т, 20м3': 9, '<3.5т, 35м3': 17, '<7.5т, 50м3': 10, 'автовоз': 6, 'бортовой': 23, 'джамбо 100м3': 5, 'зерновоз': 22, 'изотерм': 3, 'контейнер 20': 24, 'контейнер 40': 25, 'контейнер 45': 26, 'контейнеровоз': 4, 'лесовоз': 36, 'мега 100м3': 13, 'платформа': 18, 'реф': 1, 'реф мультитемп.': 49, 'самосвал': 16, 'сдвижной пол': 20, 'скотовоз': 21, 'тент 120м3': 8, 'тент 82-92 м3': 2, 'тягач': 19, 'цистерна наливная пищевая': 43, 'цистерна наливная промышленная': 7, 'цистерна насыпная пищевая': 45, 'цистерна насыпная промышленная': 46, 'щеповоз': 47}

reversed_transport = {48: '<12.5т, 60m3', 9: '<2т, 20м3', 17: '<3.5т, 35м3', 10: '<7.5т, 50м3', 6: 'автовоз', 23: 'бортовой', 5: 'джамбо 100м3', 22: 'зерновоз', 3: 'изотерм', 24: 'контейнер 20', 25: 'контейнер 40', 26: 'контейнер 45', 4: 'контейнеровоз', 36: 'лесовоз', 13: 'мега 100м3', 18: 'платформа', 1: 'реф', 49: 'реф мультитемп.', 16: 'самосвал', 20: 'сдвижной пол', 21: 'скотовоз', 8: 'тент 120м3', 2: 'тент 82-92 м3', 19: 'тягач', 43: 'цистерна наливная пищевая', 7: 'цистерна наливная промышленная', 45: 'цистерна насыпная пищевая', 46: 'цистерна насыпная промышленная', 47: 'щеповоз'}


cargo_type = {'На палетах': 54, 'Абрикосы': 535, 'Автозапчасти': 140, 'Автомасла': 105, 'Автохимия': 104, 'Агроперлит': 342, 'Аккумуляторы': 465, 'Алкогольные напитки': 8, 'Алюминивые трубы': 485, 'Алюминиевые банки': 588, 'Алюминиевые изделия': 315, 'Алюминий': 432, 'Алюмополиэтилен': 316, 'Аммиак': 106, 'Ананасы': 555, 'Антенны': 317, 'Антифриз': 107, 'Апельсины': 536, 'Арбузы': 538, 'Арматура': 309, 'Ароматизаторы': 329, 'Асфальт': 275, 'Аудио оборудование': 370, 'Ацетон': 125, 'Байдарки': 529, 'Бакалея': 647, 'Баки': 589, 'Балки': 579, 'Балки надрессорные': 310, 'Баллоны': 590, 'Бананы': 539, 'Банки': 600, 'Баранина': 362, 'Бараны': 516, 'Батареи': 318, 'Батарейки': 480, 'Башенный кран': 438, 'Беговелы': 528, 'Безалк. напитки': 9, 'Бензин': 307, 'Бентонит': 108, 'Бетон': 250, 'Бетонная плита': 496, 'Бетонные изделия': 495, 'Бетономешалка': 141, 'Бетононасосы': 142, 'Биг-бэг': 70, 'Биде': 587, 'Битум': 303, 'Блок-хаус': 573, 'Блоки': 252, 'Бобины полиэтиленовые': 425, 'Бобы': 648, 'Бойлеры': 466, 'Боковая рама': 311, 'Бондарные изделия': 617, 'Бордюр': 497, 'Ботинки': 184, 'Бочки': 73, 'Брикеты топливные': 491, 'Бритвы': 207, 'Брус': 580, 'Брусчатка': 253, 'Брюки': 183, 'Бульдозер': 712, 'Бумага туалетная': 419, 'Бумага, целлюлоза': 43, 'Бумажные стаканы': 399, 'Бутылки': 599, 'Бытовая техника': 6, 'Бытовая химия': 374, 'Вагонка': 568, 'Вагончик строительный': 439, 'Вал': 159, 'Ванны': 582, 'Варенье': 653, 'Варочные панели': 195, 'Вата': 635, 'Ватин': 387, 'Вафли': 676, 'Ведра': 388, 'Вейпы': 350, 'Велосипеды': 522, 'Веники': 389, 'Вентиляторы': 161, 'Вентиляция': 160, 'Ветеринарная продукция': 633, 'Ветряк': 440, 'Видео оборудование': 371, 'Вино': 416, 'Виноград': 549, 'Виноматериал': 462, 'Виски': 216, 'Вишня': 550, 'Вода минеральная': 223, 'Вода питьевая': 222, 'Водка': 215, 'Водный велосипед': 732, 'Водонагреватели': 473, 'Вторсырье': 493, 'Газированные напитки': 220, 'Газон': 455, 'Газосиликатные блоки': 240, 'Гайки': 277, 'Гвозди': 276, 'Генераторы': 474, 'Гербициды': 122, 'Герметики': 278, 'Гигиеническая продукция': 398, 'Гидроизоляция': 279, 'Гидроцикл': 733, 'Гипс': 281, 'Гипсокартон': 280, 'Глицерин': 123, 'Говядина': 360, 'Горох': 677, 'Горчица': 678, 'Горчичный порошок': 679, 'Гофрокартон': 601, 'Гравий': 300, 'Гранат': 547, 'Гранулы': 96, 'Грейдер': 721, 'Гречка': 680, 'Грибы': 33, 'Гриль': 206, 'Грифы': 530, 'Грузовик': 132, 'Грунт': 490, 'Грунтовка': 507, 'Груша': 551, 'Губная помада': 333, 'Гуманитарная помощь': 87, 'Двери': 282, 'Двигатель': 158, 'ДВП': 569, 'Дезинфицирующие средства': 390, 'Дезодоранты': 331, 'Демпфер': 327, 'Деревья': 453, 'Дермантин': 338, 'Детское питание': 681, 'Джинсы': 180, 'Джип': 128, 'Диваны': 228, 'Дизелин': 304, 'Дизель': 306, 'Дизельное топливо': 305, 'Дичь': 366, 'Доски': 571, 'Доски для серфинга': 526, 'Древесина': 93, 'Древесина (дрова)': 94, 'Древесина (лес кругляк)': 88, 'Древесина пиломатериалы': 15, 'Древесный уголь': 42, 'Дрова': 737, 'Дрожжи': 682, 'Другое': 55, 'ДСП': 570, 'Духи': 330, 'Духовки': 196, 'Душевые кабины': 583, 'Елки': 454, 'Ж/д запчасти': 138, 'Жалюзи': 283, 'ЖБИ': 494, 'Железобетонные изделия': 98, 'Животные': 100, 'Живые растения': 83, 'Жидкий груз': 67, 'Жидкий груз пищевой': 85, 'Жир': 683, 'Запчасти': 147, 'Звуковое оборудование': 373, 'Зеркала': 354, 'Зерно, семена': 29, 'Игрушки': 614, 'Известь': 284, 'Изделия из кожи': 20, 'Изделия из металла': 16, 'Изолента': 286, 'Изоляция': 285, 'Изюм': 684, 'Индейка': 403, 'Индейки': 517, 'Индюшатина': 365, 'Инструменты': 463, 'Йогурт': 685, 'Кабели и провода': 90, 'Казеин': 49, 'Какао': 686, 'Калориферы': 475, 'Камень': 302, 'Канализационные люки': 328, 'Канат': 391, 'Канистры': 594, 'Канцтовары': 12, 'Капуста': 562, 'Карандаши': 237, 'Картон': 423, 'Картофель': 558, 'Кастрюли': 610, 'Катамаран': 731, 'Катер': 729, 'Каток дорожный': 723, 'Каучук': 359, 'Кафель': 287, 'Квадроцикл': 134, 'Кварцит': 297, 'Квас': 224, 'Кеги пивные': 595, 'Кемпер': 726, 'Керамоблок': 288, 'Кессоны': 501, 'Кефир': 709, 'Киви': 548, 'Килька': 641, 'Кирпич': 289, 'Кисломолочная продукция': 710, 'Кислота': 109, 'Кислота лимонная': 687, 'Клапаны': 162, 'Клей': 238, 'Клубника': 552, 'Книги': 424, 'Коаксиальный кабель': 607, 'Кованные изделия': 325, 'Ковролин': 418, 'Ковры': 40, 'Ковш': 163, 'Кожа': 337, 'Кожзаменитель': 339, 'Козы': 513, 'Колбаса': 688, 'Колбасная оболочка': 689, 'Колготки': 179, 'Колесная пара': 312, 'Колесные диски': 164, 'Комбайн': 724, 'Комбайны': 205, 'Коммутационный кабель': 609, 'Компрессор': 165, 'Компьютерные компоненты': 602, 'Компьютеры, электроника': 31, 'Кондитерские изделия': 638, 'Кондиционеры': 476, 'Конопляное масло': 445, 'Консервация': 406, 'Консервы': 37, 'Контейнер морской 20': 75, 'Контейнер морской 40': 76, 'Контейнер морской 45': 95, 'Конфеты': 690, 'Коньяк': 214, 'Корм для животных': 703, 'Коробки': 68, 'Коровы': 511, 'Костюмы': 182, 'Котел': 166, 'Котлы': 167, 'Коты': 515, 'Кофе': 691, 'Кофеварки': 194, 'Кофемолки': 204, 'Краска': 446, 'Крахмал': 692, 'Креветки': 409, 'Крем для обуви': 394, 'Крема': 335, 'Крепежи': 291, 'Кресла': 229, 'Кровати': 230, 'Кролик': 363, 'Крупа': 644, 'Крышки': 596, 'Кукуруза': 631, 'Кукурузное масло': 444, 'Кукурузные палочки': 693, 'Культиваторы': 168, 'Кунжут': 694, 'Курица': 402, 'Куртки': 187, 'Куры': 509, 'Кусты': 456, 'Кухонный инвентарь': 612, 'Лавровый лист': 695, 'Лак': 447, 'Лако-красочные изделия': 64, 'Лактоза': 696, 'Ламели': 578, 'Ламинат': 292, 'Лампочки': 472, 'Латунь': 436, 'ЛДСП': 572, 'Легковая': 127, 'Лимоны': 553, 'Линолеум': 293, 'Листы': 489, 'Лифты': 169, 'Личные вещи': 101, 'Лодка': 730, 'Лопасти': 437, 'Лосьоны': 334, 'Лошади': 510, 'Лук': 559, 'Лыжи': 524, 'Люстры': 618, 'Мазут': 124, 'Майонез': 697, 'Макароны': 698, 'Макулатура': 69, 'Мандарины': 554, 'Манка': 705, 'Маргарин': 699, 'Маски': 636, 'Масла': 117, 'Масло': 700, 'Матрасы': 231, 'Мебель': 10, 'Мёд': 701, 'Медикаменты': 50, 'Медицинский инструмент': 637, 'Медицинское оборудование': 464, 'Мел': 241, 'Металл': 47, 'Металлолом': 17, 'Металлопрокат': 92, 'Метизы': 294, 'Мешки': 74, 'Мидии': 411, 'Микроавтобус': 129, 'Микроволновки': 198, 'Миксеры': 173, 'Минвата': 242, 'Минивэн': 130, 'Молоко': 702, 'Молоко сгущённое': 658, 'Молоко сухое': 41, 'Морепродукты': 410, 'Морковь': 560, 'Мороженое': 44, 'Мотор': 170, 'Мотороллеры': 725, 'Мотоцикл': 133, 'Мочевина/карбамид': 345, 'Моющие средства': 392, 'Мрамор': 295, 'Музыкальные инструменты': 521, 'Музыкальные колонки': 372, 'Мука': 645, 'Мусор': 492, 'Мусорные баки': 393, 'Мусорные пакеты': 401, 'Мыло': 396, 'Мясо': 35, 'Мячи': 532, 'Навалом': 72, 'Наждачная бумага': 296, 'Насосы': 171, 'Негабаритный груз': 53, 'Нефтепродукты': 14, 'Ножи': 615, 'Носки': 177, 'Обогреватели': 477, 'Оборуд. и части': 2, 'Обувь': 11, 'Овес': 629, 'Овощи': 4, 'Овсяные хлопья': 707, 'Овцы': 512, 'Огнетушители': 172, 'Огурцы': 561, 'Одеяла': 619, 'Окна': 355, 'Оленина': 367, 'Оливки': 708, 'Оливковое масло': 443, 'Опилки': 736, 'Оптоволоконный кабель': 606, 'Орехи': 537, 'Отбеливатель': 375, 'Отделочные материалы': 99, 'Отходы': 97, 'Офисная мебель': 232, 'Пальто': 188, 'Памперсы': 376, 'Паркет': 254, 'Паркетная доска': 255, 'Парфюмерия, косметика': 18, 'Патока': 649, 'ПВХ': 426, 'Пена монтажная': 257, 'Пеноблоки': 258, 'Пенопласт': 243, 'Пенополеуритан': 260, 'Пенополистирол': 256, 'Пеностекло': 259, 'Переезд': 518, 'Перекрытия': 503, 'Перец': 567, 'Перецепка': 62, 'Персики': 540, 'Перчатки': 174, 'Песок': 244, 'Пестициды': 110, 'Песчаник': 261, 'Петрушка': 564, 'Печатная продукция': 420, 'Печень': 603, 'Печенье': 650, 'Печи': 208, 'Пианино': 519, 'Пиво': 415, 'Пищевые добавки': 651, 'Плавсредства': 727, 'Пластик': 46, 'Пластиковые стаканы': 400, 'Пластиковые трубы': 483, 'Плинтуса': 263, 'Плита варочная': 197, 'Плитка': 262, 'Плиты перекрытия': 502, 'Повидло': 652, 'Поглощающий аппарат': 313, 'Погрузчики': 719, 'Поддоны': 65, 'Подоконники': 264, 'Подсолнечное масло': 442, 'Подушки': 616, 'Подшипники': 143, 'Полиграфия': 421, 'Поликарбонат': 427, 'Полипропилен': 428, 'Полистирол': 429, 'Полотенца': 621, 'Полуприцеп, прицеп': 57, 'Помидоры': 566, 'Поролон': 299, 'Порошок стиральный': 377, 'Постельное белье': 620, 'Посуда': 353, 'Посуда одноразовая': 397, 'Посудомоечные машины': 200, 'Премикс': 654, 'Преобразователи': 479, 'Пресервы': 405, 'Прессы': 144, 'Проволка': 486, 'Продукты питания': 28, 'Прожекторы': 478, 'Просо': 623, 'Профили': 488, 'Профлист': 245, 'Пружины': 320, 'Прутья': 487, 'Птица': 36, 'Пшеница': 622, 'Пшено': 706, 'Пюре фруктовое': 655, 'Радиаторы': 319, 'Разделочные доски': 613, 'Ракетки': 533, 'Раковины': 584, 'Рапаны': 412, 'Рапс': 628, 'Рапсовое масло': 441, 'Распределители': 467, 'Рассада': 449, 'Растворитель': 111, 'Растительное масло': 66, 'Редукторы': 145, 'Резина и изделия': 21, 'Рельсы': 314, 'Ремни': 341, 'Рис': 656, 'Рожь': 632, 'Розетки': 468, 'Ром': 218, 'Рубашки': 181, 'Рубероид': 265, 'Рулоны': 71, 'Ручки': 236, 'Рыба': 38, 'Саженцы': 451, 'Сайдинг': 266, 'Сало': 657, 'Салфетки': 378, 'Самокаты': 523, 'Сантехника': 19, 'Сантехнические трубы': 484, 'Сапоги': 185, 'Сахар': 642, 'Сборный груз': 32, 'Сваи': 321, 'Свекла': 556, 'Светильники': 469, 'Светотехника': 470, 'Свечи': 395, 'Свинина': 361, 'Свиньи': 508, 'Сейфы': 322, 'Секонд хенд': 175, 'Секции заборные': 499, 'Секционные ворота': 323, 'Селитра': 343, 'Сельдерей': 563, 'Сельдь': 408, 'Сельхозоборудование': 146, 'Сельхозпродукция': 624, 'Сельхозтехника': 713, 'Семена/семечки': 640, 'Сеялка': 714, 'Сигареты': 346, 'Сигары': 348, 'Сидр': 417, 'Силовой кабель': 608, 'Синтетика': 212, 'Скейтборды': 525, 'Сковородки': 611, 'Скотч': 233, 'Скутеры': 715, 'Слабоалкогольные напитки (пиво, вино)': 39, 'Сланцы': 176, 'Сливки': 659, 'Сливы': 541, 'Смазочные материалы': 112, 'Смеси сухие': 660, 'Смесители': 581, 'Снегоходы': 716, 'Снеки': 661, 'Сноуборды': 527, 'Собаки': 514, 'Соки': 221, 'Соленья': 605, 'Солидол': 113, 'Соль': 58, 'Соль пищевая': 704, 'Соль промышленная': 298, 'Соя': 626, 'Специи': 662, 'Спецтехника': 717, 'Спирт': 217, 'Спирт коньячный': 213, 'Спирт сухой': 380, 'Спички': 379, 'Спортивные костюмы': 189, 'Спорттовары': 103, 'Средства гигиены': 381, 'Средства защиты растений': 114, 'Сталь': 430, 'Стальные заготовки': 433, 'Стальные трубы': 482, 'Станки': 148, 'Стекло, фарфор': 26, 'Стеклотара': 352, 'Стиральные машины': 199, 'Столбы бетонные': 500, 'Столешницы': 574, 'Столы': 226, 'Стрейч-пленка': 382, 'Строительная смесь': 267, 'Строительная техника': 137, 'Строительные леса': 575, 'Стройматериалы': 13, 'Стулья': 225, 'Ступеньки': 268, 'Сувениры': 234, 'Сульфат аммония': 344, 'Сульфат натрия': 115, 'Сумки': 340, 'Сухари': 663, 'Сухие завтраки': 664, 'Сухофрукты': 542, 'Сыворотка': 459, 'Сыпучий груз': 59, 'Сыпучий груз пищевой': 86, 'Сэндвич-панели': 246, 'Табак': 347, 'Табачные изделия': 25, 'Тапочки': 190, 'Тара и упаковка': 24, 'Текила': 219, 'Текстиль (обувь, одежда)': 5, 'Телевизоры': 193, 'Тележки': 150, 'Тельферы': 149, 'Теннисный стол': 534, 'Термоблок': 270, 'Термоизоляция': 269, 'Террасная доска': 576, 'Тетради': 235, 'Титан': 434, 'Ткани, пряжа, нитки': 7, 'Ткань': 209, 'Товары для дома': 102, 'Томатная паста': 665, 'Торговое оборудование': 151, 'Торф': 27, 'Тосол': 118, 'Трава газонная': 452, 'Траверсы': 152, 'Трактор': 136, 'Транспортные средства': 30, 'Трансформаторы': 471, 'Тренажеры': 531, 'Трикотаж': 210, 'Трос': 383, 'Тротуарная плитка': 271, 'Трубы': 91, 'Турбины': 153, 'Туфли': 186, 'Туши мороженые': 364, 'Тушь': 332, 'Уайт-спирит': 119, 'Увлажнители': 481, 'Углерод': 116, 'Уголок': 272, 'Удобрения': 23, 'Укладчики': 718, 'Укроп': 565, 'Уксус': 666, 'Умывальники': 586, 'Универсал': 131, 'Унитазы': 585, 'Устрицы': 413, 'Утеплитель': 247, 'Утка': 369, 'Утюги': 201, 'Файлы': 239, 'Фанера': 301, 'Фармацевтическая продукция': 734, 'Фарш': 604, 'Фасоль': 667, 'Фены': 202, 'Ферросплавы': 431, 'Фибра': 273, 'Фильтры': 154, 'Флаконы': 591, 'Фланец': 155, 'Фольга': 384, 'Фортепиано': 520, 'Фреза': 156, 'Фреон': 120, 'Фруктовые деревья': 458, 'Фруктовые саженцы': 457, 'Фрукты': 3, 'Фурнитура': 385, 'Халаты': 191, 'Халва': 668, 'Хим. продукты': 1, 'Химия': 448, 'Хлебобулочные изделия': 669, 'Хлопок прессованный': 61, 'Хлопья': 670, 'Хлор': 121, 'Хмель': 630, 'Хозтовары': 22, 'Холодильники': 192, 'Холодильное оборудование': 139, 'Хрен': 671, 'Хурма': 543, 'Цветы': 450, 'Цемент': 248, 'Цистерна': 597, 'Цитрус': 544, 'Чай': 672, 'Чайники': 203, 'Черепица': 251, 'Черешня': 545, 'Чеснок': 557, 'Чипсы': 646, 'Чугун': 435, 'Чулки': 178, 'Шампанское': 414, 'Шампунь': 336, 'Швеллер': 324, 'Шерсть': 211, 'Шины/покрышки': 358, 'Шкафы': 227, 'Шкуры мокросолёные': 48, 'Шланг': 386, 'Шоколад': 673, 'Шпалы': 498, 'Шпатлевка': 505, 'Шпон': 577, 'Шприцы': 634, 'Штукатурка': 506, 'Шурупы': 274, 'Щебень': 249, 'Щелочь': 126, 'Щепа': 735, 'Экскаватор': 720, 'Электроды': 157, 'Электронные сигареты': 349, 'Электрооборудование': 89, 'Яблоки': 546, 'Ягоды': 34, 'Яичный порошок': 674, 'Яйца': 675, 'Яхта': 728, 'Ячмень': 627, 'Ящики': 593}
def get_transport_id_by_initials(initials, transport_dict):
    # Приведем первые 3 буквы к нижнему регистру для сравнения
    initials = initials[:3].lower()
    for transport, id in transport_dict.items():
        if transport[:3].lower() == initials:
            return id
    return 0

class CargoKz:

    def __init__(self, punkt_a, punkt_b, vehicl_type, cargo_name, id_file):
        self.s = requests.Session()

        self.name_file = f'output{id_file}.xlsx'

        headers = {
            'Host': 'api.cargo.lt',
            'Cache-Control': 'no-cache',
            'X-Api-Source': 'application',
            'Site-User-Language': 'RU',
            'Content-Type': 'application/json',
            'Access-Token': 'iwpVyx6CRQ_bd44e69f2ec2442781c673353e92972a',
            'X-Api-Source-Appversion': '3.4.25',
            'X-Api-Device': '863818024093388',
            'X-Api-Device-Coordinates': '55.7569618*37.6150093',
            'X-Messenger-Source-Type': 'android',
            # 'Accept-Encoding': 'gzip, deflate',
            'User-Agent': 'okhttp/4.10.0',
        }

        self.s.headers.update(headers)

        params = {
            'name': punkt_a,
            'type': '0',
            'country': '0',
        }

        response = self.s.get('https://api.cargo.lt/locations/name', params=params, headers=headers)
        print(f'country cargo_kz {response}')
        resp = response.json()
        self.punkt_a_id = f'{resp.get("cities", [{}])[0].get("id", 0)}'
        self.punkt_a_country = f'{resp.get("cities", [{}])[0].get("country", 0)}'

        params = {
            'name': punkt_b,
            'type': '0',
            'country': '0',
        }

        response = self.s.get('https://api.cargo.lt/locations/name', params=params, headers=headers)
        print(f'country cargo_kz {response}')
        resp = response.json()
        self.punkt_b_id = f'{resp.get("cities", [{}])[0].get("id", 0)}'
        self.punkt_b_country = f'{resp.get("cities", [{}])[0].get("country", 0)}'

        self.vehicle_type = []
        if vehicl_type:
            vehicle_type = vehicl_type.split(' ')
            for vh in vehicle_type:
                self.vehicle_type.append(str(get_transport_id_by_initials(vh, transport_type)))
        print(self.vehicle_type)
        self.vehicle_type = ','.join(self.vehicle_type)


        #self.cargo_name = []
        #if cargo_name:
            #cargo_name = cargo_name.split(' ')
            #for cn in cargo_name:
                #self.cargo_name.append(cargo_type.get(cn.lower(), 1))

        #self.cargo_name = ','.join(self.cargo_name)

    def run_gruz(self):
        json_data = {
            'adr': 0,
            'apps': 1,
            'blocked': 1,
            'cabotage': 1,
            'declaration': 0,
            'filter': 0,
            'filterid': 0,
            'filter_name': '',
            'filter_save': 0,
            'fromCity': [],
            's_from_country': f'{self.punkt_a_country}-1',
            'from_date': '-1',
            's_from_id': f'{self.punkt_a_id}',
            's_from_radius': '100',
            'imported': 1,
            'kran': 0,
            'lift': 0,
            'load_back': 0,
            'load_full': 0,
            'load_partly': 0,
            'load_side': 0,
            'load_top': 0,
            'switch': 0,
            'mini_adr': 0,
            'mini_bywaya': 0,
            'mini_bywayb': 0,
            'mini_bywayc': 0,
            'mini_loadfull': 0,
            'mini_loadpartly': 0,
            'mini_trailer': None,
            'mini_volume': 0,
            'mini_volumemax': 0.0,
            'mini_volumemin': 0.0,
            'mini_weight': 0,
            'mini_weightmax': 0.0,
            'mini_weightmin': 0.0,
            'mini_bywaykm': 0,
            'mode': 0,
            'offer': '0',
            'orderby': 'updated',
            'page': 0,
            'palett': 0,
            'palettmax': 0,
            'palettmin': 0,
            'paletttype': 1,
            'request': 0,
            'seen': 0,
            'temperature': 0,
            'tempmax': 20,
            'tempmin': -20,
            'tir': 0,
            'toCity': [],
            's_to_country': f'{self.punkt_b_country}-1',
            'to_date': '-1',
            's_to_id': f'{self.punkt_b_id}',
            's_to_radius': '100',
            'today': 0,
            'trailers': f'{self.vehicle_type}',
            'trailersif': 0,
            'type': '0',
            'updatenew': None,
            'updatetime': 0,
            'volume': 0,
            'volumeldm': 0,
            'volumeldmmax': 0.0,
            'volumeldmmin': 0.0,
            'volumemax': 120.0,
            'volumemin': 0.0,
            'weight': 0,
            'weightmax': 0.0,
            'weightmin': 0.0,
        }

        response = self.s.post('https://api.cargo.lt/offers/search', json=json_data, verify=False)
        print(f'cargo kz {response}')
        resp = response.json()
        page = resp.get('offers', {}).get('pages', {}).get('total', 0)
        flattens = []

        for i in range(1, page+1):
            json_data['page'] = i-1
            response = self.s.post('https://api.cargo.lt/offers/search', json=json_data, verify=False)
            print(f'cargo kz {response}')
            resp = response.json()
            offers = resp.get('offers', {}).get('offers', {}).get('offers', [])

            cities_dct = {}
            cities = resp.get('offers', {}).get('offers', {}).get('cities', [])
            for cit in cities:
                cities_dct[cit.get('id', -1)] = cit.get('name', '')

            currencer = resp.get('offers', {}).get('offers', {}).get('currencies', [])
            currencer_dct = {}
            for cur in currencer:
                currencer_dct[cur.get('id', '')] = cur.get('name', '')


            account = resp.get('offers', {}).get('offers', {}).get('accounts', [])
            account_dct = {}
            for acc in account:
                account_dct[acc.get('id', '')] = f"{acc.get('phone', '')} {acc.get('mobile', '')} {acc.get('email', '')}"

            for off in offers:
                from_country = cities_dct.get(off.get('fromCountry', 0))
                from_city = cities_dct.get(off.get('fromCity', 0))

                to_country = cities_dct.get(off.get('toCountry', 0))
                to_city = cities_dct.get(off.get('toCity', 0))

                date_start = off.get('fromDate', '')
                date_end = off.get('tillDate', '')

                date_start = date_start[8:10] + '.' + date_start[5:7]
                date_end =  date_end[8:10] + '.' + date_end[5:7]

                date_result = f'{date_start} - {date_end}'

                trailers = off.get('trailers', [])
                trail = []
                for trailer in trailers:
                    trail.append(reversed_transport.get(trailer, ''))

                trail = ' '.join(trail)
                weight = off.get('weight', '')

                price = off.get('price', '')

                valuta = currencer_dct.get(off.get('currency', ''), 'RUR')

                price_itog = f'{price} {valuta}'

                contact = account_dct.get(off.get('account', ''), '')

                flattens.append(
                    [from_city, from_country, to_city, to_country, date_result, trail, f'{weight} т', price_itog, contact, 'cargo-kz']
                )

        file_path_write = self.name_file
        workbook = load_workbook(file_path_write)
        worksheet = workbook.active
        for rrik in flattens:
            worksheet.append(rrik)
        workbook.save(file_path_write)

    def run_avto(self):
        json_data = {
        'adr': 0,
        'apps': 1,
        'blocked': 1,
        'cabotage': 1,
        'declaration': 0,
        'filter': 0,
        'filterid': 0,
        'filter_name': '',
        'filter_save': 0,
        'fromCity': [],
        's_from_country': f'{self.punkt_a_country}-1',
        'from_date': '-1',
        's_from_id': f'{self.punkt_a_id}',
        's_from_radius': '100',
        'imported': 0,
        'kran': 0,
        'lift': 0,
        'load_back': 0,
        'load_full': 0,
        'load_partly': 0,
        'load_side': 0,
        'load_top': 0,
        'switch': 0,
        'mini_adr': 0,
        'mini_bywaya': 0,
        'mini_bywayb': 0,
        'mini_bywayc': 0,
        'mini_loadfull': 0,
        'mini_loadpartly': 0,
        'mini_trailer': None,
        'mini_volume': 0,
        'mini_volumemax': 0.0,
        'mini_volumemin': 0.0,
        'mini_weight': 0,
        'mini_weightmax': 0.0,
        'mini_weightmin': 0.0,
        'mini_bywaykm': 0,
        'mode': 0,
        'offer': '0',
        'orderby': 'from-asc',
        'page': 0,
        'palett': 0,
        'palettmax': 0,
        'palettmin': 0,
        'paletttype': 1,
        'request': 0,
        'seen': 0,
        'temperature': 0,
        'tempmax': 20,
        'tempmin': -20,
        'tir': 0,
        'toCity': [],
        's_to_country': f'{self.punkt_b_country}-1',
        'to_date': '-1',
        's_to_id': f'{self.punkt_b_id}',
        's_to_radius': '100',
        'today': 0,
        'trailers': f'{self.vehicle_type}',
        'trailersif': 0,
        'type': '1',
        'updatenew': None,
        'updatetime': 0,
        'volume': 0,
        'volumeldm': 0,
        'volumeldmmax': 0.0,
        'volumeldmmin': 0.0,
        'volumemax': 0.0,
        'volumemin': 0.0,
        'weight': 0,
        'weightmax': 0.0,
        'weightmin': 0.0,
    }


        response = self.s.post('https://api.cargo.lt/offers/search', json=json_data, verify=False)
        print(f'cargo kz {response}')
        resp = response.json()
        page = resp.get('offers', {}).get('pages', {}).get('total', 0)
        flattens = []

        for i in range(1, page + 1):
            json_data['page'] = i - 1
            response = self.s.post('https://api.cargo.lt/offers/search', json=json_data, verify=False)
            print(f'cargo kz {response}')
            resp = response.json()
            offers = resp.get('offers', {}).get('offers', {}).get('offers', [])

            cities_dct = {}
            cities = resp.get('offers', {}).get('offers', {}).get('cities', [])
            for cit in cities:
                cities_dct[cit.get('id', -1)] = cit.get('name', '')

            currencer = resp.get('offers', {}).get('offers', {}).get('currencies', [])
            currencer_dct = {}
            for cur in currencer:
                currencer_dct[cur.get('id', '')] = cur.get('name', '')

            account = resp.get('offers', {}).get('offers', {}).get('accounts', [])
            account_dct = {}
            for acc in account:
                account_dct[
                    acc.get('id', '')] = f"{acc.get('phone', '')} {acc.get('mobile', '')} {acc.get('email', '')}"

            for off in offers:
                from_country = cities_dct.get(off.get('fromCountry', 0))
                from_city = cities_dct.get(off.get('fromCity', 0))

                to_country = cities_dct.get(off.get('toCountry', 0))
                to_city = cities_dct.get(off.get('toCity', 0))

                date_start = off.get('fromDate', '')
                date_end = off.get('tillDate', '')

                date_start = date_start[8:10] + '.' + date_start[5:7]
                date_end = date_end[8:10] + '.' + date_end[5:7]

                date_result = f'{date_start} - {date_end}'

                trailers = off.get('trailers', [])
                trail = []
                for trailer in trailers:
                    trail.append(reversed_transport.get(trailer, ''))

                trail = ' '.join(trail)
                weight = off.get('weight', '')

                price = off.get('price', '')

                valuta = currencer_dct.get(off.get('currency', ''), 'RUR')

                price_itog = f'{price} {valuta}'

                contact = account_dct.get(off.get('account', ''), '')

                flattens.append(
                    [from_city, from_country, to_city, to_country, date_result, trail, f'{weight} т', price_itog,
                     contact, 'cargo-kz']
                )

        file_path_write = self.name_file
        workbook = load_workbook(file_path_write)
        worksheet = workbook.active
        for rrik in flattens:
            worksheet.append(rrik)
        workbook.save(file_path_write)







